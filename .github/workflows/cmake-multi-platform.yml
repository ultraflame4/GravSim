# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:

  workflow_dispatch:
env: 
    VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
    
jobs:

  build:
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [
          windows-latest,
#          ubuntu-latest,
#          macos-latest
        ]
        build_type: [Release]
        c_compiler: [clang]
        cpp_compiler: [clang++]
#
#        include:
#
#          - os: ubuntu-latest
#            build_type: Release
#            c_compiler: clang
#            cpp_compiler: clang++
#            display: wayland
#
#          - os: ubuntu-latest
#            build_type: Release
#            c_compiler: clang
#            cpp_compiler: clang++
#            display: x11

    steps:
    
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'

    - name: Setup Cpp
      uses: aminya/setup-cpp@v1
      with:
        compiler: llvm
        cmake: true
        ninja: true

    - run: cmake --version
    - run: ninja --version

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "
        build-output-dir=${{ github.workspace }}/build
        filename=${{ github.event.repository.name }}_${{ github.ref_name }}_build-${{ matrix.os }}_${{ runner.os }}-${{ matrix.display || '' }}_release.zip
        " >> "$GITHUB_OUTPUT"

    - name: Export GitHub Actions cache environment variables
      uses: actions/github-script@v6
      with:
        script: |
          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

    - name: Install Glfw X11 Deps
      if: ${{ matrix.display == 'x11' && runner.os == 'linux'}}
      run: |
            sudo apt update
            sudo apt install libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev libxext-dev libgl-dev

    - name: Install Glfw Wayland Deps
      if: ${{ matrix.display == 'wayland' && runner.os == 'linux'}}
      run: |
            sudo apt update
            sudo apt install libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev libxext-dev wayland-protocols libwayland-dev libxkbcommon-dev libgl-dev
            
            
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DGLFW_BUILD_WAYLAND=${{ (runner.os == 'linux' && matrix.display == 'wayland' ) && 'ON' || 'OFF'}}
        -S ${{ github.workspace }}
        -G Ninja
        --preset=default

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Archive Release
      uses: thedoctor0/zip-release@0.7.1
      with:
        type: 'zip'
        filename:  '${{ github.workspace }}/${{ steps.strings.outputs.filename }}'
        directory: ${{ steps.strings.outputs.build-output-dir }}
        exclusions: '*.git* *.ninja* *.cmake CMakeCache.txt CMakeFiles *vcpkg* include/*'

    - name: Upload Release
      uses: ncipollo/release-action@v1.12.0
      with:
        artifacts: ${{ steps.strings.outputs.filename }}
        token: ${{ secrets.GITHUB_TOKEN }}
        allowUpdates: true

    - name: Set up butler
      uses: jdno/setup-butler@v1


    - name: Publish game to itch.io
      run: |
        butler push ${{ steps.strings.outputs.filename }} notlivingstudios/gravsim:${{ runner.os  }} --userversion ${{ github.ref_name }}
      env:
        BUTLER_API_KEY: ${{ secrets.BUTLER_CREDENTIALS }}

    - name: Archive build
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-results-${{ steps.strings.outputs.filename }} 
        path: ./build

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
